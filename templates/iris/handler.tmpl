package handlers

import (
	"{{ dir .Package }}/db"
	"{{ .Package }}"
	"encoding/json"
	"errors"
	
	"github.com/kataras/iris/v12"
)

{{- $pn := pascal .CurrentSchema.Name }}
{{- $ppn := pascal .CurrentSchema.Name | plural }}
{{- $cn := camel .CurrentSchema.Name  }}
{{- $cpn := camel .CurrentSchema.Name | plural }}

func Read{{ $pn }}(ctx iris.Context) {
	id := ctx.Params().Get("id")
	{{ $cn }}, err := db.Client.{{ $pn }}.Get(ctx.Request().Context(), id)
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	StopWithSuccess(ctx, iris.StatusOK, {{ $cn }})
}

func Read{{ $ppn }}(ctx iris.Context) {
	query := new(ent.{{ $pn }}QueryInput)
	q := ctx.URLParam("query")
	if q != "" {
		err := json.Unmarshal([]byte(q), query)
		if err != nil {
			StopWithError(ctx, iris.StatusBadRequest, err)
			return
		}
	}
	{{ $cpn }}, err := db.Client.{{ $pn }}.Query().SetInput(query).All(ctx.Request().Context())
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	StopWithSuccess(ctx, iris.StatusOK, {{ $cpn }})
}

func Create{{ $pn }}(ctx iris.Context) {
	body := new(ent.{{ $pn }}CreateInput)
	err := ctx.ReadBody(body)
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	{{ $cn }}, err := db.Client.{{ $pn }}.Create().SetInput(body).Save(ctx.Request().Context())
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	StopWithSuccess(ctx, iris.StatusCreated, {{ $cn }})
}

func Create{{ $ppn }}(ctx iris.Context) {
	body := []*ent.{{ $pn }}CreateInput{}
	err := ctx.ReadBody(&body)
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	if len(body) == 0 {
		StopWithError(ctx, iris.StatusBadRequest, errors.New("empty array"))
		return
	}
	builders := []*ent.{{ $pn }}Create{}
	for _, b := range body {
		builders = append(builders, db.Client.{{ $pn }}.Create().SetInput(b))
	}
	{{ $cpn }}, err := db.Client.{{ $pn }}.CreateBulk(builders...).Save(ctx.Request().Context())
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	StopWithSuccess(ctx, iris.StatusCreated, {{ $cpn }})
}

func Update{{ $pn }}(ctx iris.Context) {
	id := ctx.Params().Get("id")
	body := new(ent.{{ $pn }}UpdateInput)
	err := ctx.ReadBody(body)
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	{{ $cn }}, err := db.Client.{{ $pn }}.UpdateOneID(id).SetInput(body).Save(ctx.Request().Context())
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	StopWithSuccess(ctx, iris.StatusOK, {{ $cn }})
}

func Update{{ $ppn }}(ctx iris.Context) {
	w := ctx.URLParam("where")
	where := new(ent.{{ $pn }}WhereInput)
	action := db.Client.{{ $pn }}.Update()
	if w != "" {
		err := json.Unmarshal([]byte(w), where)
		if err != nil {
			StopWithError(ctx, iris.StatusBadRequest, err)
			return
		}
		predicate, err := where.P()
		if err != nil {
			StopWithError(ctx, iris.StatusBadRequest, err)
			return
		}
		action = action.Where(predicate)
	}
	body := new(ent.{{ $pn }}UpdateInput)
	err := ctx.ReadBody(body)
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}

	_, err = action.SetInput(body).Save(ctx.Request().Context())
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	StopWithSuccess(ctx, iris.StatusOK, nil)
}

func Delete{{ $pn }}(ctx iris.Context) {
	id := ctx.Params().Get("id")
	err := db.Client.{{ $pn }}.DeleteOneID(id).Exec(ctx.Request().Context())
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	StopWithSuccess(ctx, iris.StatusOK, nil)
}

func Delete{{ $ppn }}(ctx iris.Context) {
	w := ctx.URLParam("where")
	where := new(ent.{{ $pn }}WhereInput)
	action := db.Client.{{ $pn }}.Delete()
	if w != "" {
		err := json.Unmarshal([]byte(w), where)
		if err != nil {
			StopWithError(ctx, iris.StatusBadRequest, err)
			return
		}
		predicate, err := where.P()
		if err != nil {
			StopWithError(ctx, iris.StatusBadRequest, err)
			return
		}
		action = action.Where(predicate)
	}
	_, err := action.Exec(ctx.Request().Context())
	if err != nil {
		StopWithError(ctx, iris.StatusBadRequest, err)
		return
	}
	StopWithSuccess(ctx, iris.StatusOK, nil)
}
